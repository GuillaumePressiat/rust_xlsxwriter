// Test case that compares a file generated by rust_xlsxwriter with a file
// created by Excel.
//
// SPDX-License-Identifier: MIT OR Apache-2.0
//
// Copyright 2022-2024, John McNamara, jmcnamara@cpan.org

use crate::common;
use rust_xlsxwriter::{
    CustomSerializeField, SerializeFieldOptions, Table, TableStyle, Workbook, XlsxError,
    XlsxSerialize,
};
use serde::Serialize;

// Test case for Serde serialization. First test isn't serialized.
fn create_new_xlsx_file_1(filename: &str) -> Result<(), XlsxError> {
    let mut workbook = Workbook::new();

    let worksheet = workbook.add_worksheet();

    worksheet.set_column_range_width(2, 5, 10.288)?;

    let table = Table::new().set_style(TableStyle::Medium10);

    worksheet.add_table(2, 2, 12, 5, &table)?;

    workbook.save(filename)?;

    Ok(())
}

// Test case for Serde serialization. Test Worksheet table.
fn create_new_xlsx_file_2(filename: &str) -> Result<(), XlsxError> {
    let mut workbook = Workbook::new();
    let worksheet = workbook.add_worksheet();

    #[derive(Serialize)]
    #[serde(rename_all = "PascalCase")]
    struct MyStruct {
        column1: Option<f64>,
        column2: Option<f64>,
        column3: Option<f64>,
        column4: Option<f64>,
    }

    let data = MyStruct {
        column1: None,
        column2: None,
        column3: None,
        column4: None,
    };

    let header_options = SerializeFieldOptions::new()
        .set_table_style(TableStyle::Medium10)
        .set_custom_headers(&[
            CustomSerializeField::new("Column1").set_column_width(10.288),
            CustomSerializeField::new("Column2").set_column_width(10.288),
            CustomSerializeField::new("Column3").set_column_width(10.288),
            CustomSerializeField::new("Column4").set_column_width(10.288),
        ]);

    worksheet.serialize_headers_with_options(2, 2, &data, &header_options)?;

    for _ in 1..=10 {
        worksheet.serialize(&data)?;
    }

    workbook.save(filename)?;

    Ok(())
}

// Test case for Serde serialization. Test Worksheet table.
fn create_new_xlsx_file_3(filename: &str) -> Result<(), XlsxError> {
    let mut workbook = Workbook::new();
    let worksheet = workbook.add_worksheet();

    #[derive(Serialize, XlsxSerialize)]
    #[serde(rename_all = "PascalCase")]
    #[xlsx(table_style = TableStyle::Medium10)]
    struct MyStruct {
        #[xlsx(column_width = 10.288)]
        column1: Option<f64>,

        #[xlsx(column_width = 10.288)]
        column2: Option<f64>,

        #[xlsx(column_width = 10.288)]
        column3: Option<f64>,

        #[xlsx(column_width = 10.288)]
        column4: Option<f64>,
    }

    worksheet.set_serialize_headers::<MyStruct>(2, 2)?;

    let data = MyStruct {
        column1: None,
        column2: None,
        column3: None,
        column4: None,
    };

    for _ in 1..=10 {
        worksheet.serialize(&data)?;
    }

    workbook.save(filename)?;

    Ok(())
}

#[test]
fn test_serde25_1() {
    let test_runner = common::TestRunner::new()
        .set_name("table24")
        .set_function(create_new_xlsx_file_1)
        .unique("serde25_1")
        .initialize();

    test_runner.assert_eq();
    test_runner.cleanup();
}

#[test]
fn test_serde25_2() {
    let test_runner = common::TestRunner::new()
        .set_name("table24")
        .set_function(create_new_xlsx_file_2)
        .unique("serde25_2")
        .initialize();

    test_runner.assert_eq();
    test_runner.cleanup();
}

#[test]
fn test_serde25_3() {
    let test_runner = common::TestRunner::new()
        .set_name("table24")
        .set_function(create_new_xlsx_file_3)
        .unique("serde25_3")
        .initialize();

    test_runner.assert_eq();
    test_runner.cleanup();
}
